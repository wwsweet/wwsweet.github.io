{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"sweet","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2017-07-09T09:03:52.102Z","updated":"2017-07-08T03:34:05.962Z","comments":true,"path":"2017/07/09/我的第一篇博客/","link":"","permalink":"http://yoursite.com/2017/07/09/我的第一篇博客/","excerpt":"日期: 2017-07-06 14:45:52正文:第一次用博客，写一篇文章记录一下。","text":"日期: 2017-07-06 14:45:52正文:第一次用博客，写一篇文章记录一下。 到今天，学习了以下的内容：1.Python3廖雪峰教程看到了函数式编程2.python的编码规范3.pythonic的典型实例4.学会了如何搭建自己的博客。5.Markdown的基本语法 虽然刚开始几天，但是收获可以说不少吧。Python虽然看了一遍，但是仅仅到达了解的地步，还没有完全掌握，这两天需要多练习Python代码。","categories":[],"tags":[]},{"title":"python 自学笔记","slug":"python-自学笔记","date":"2017-07-09T09:03:52.082Z","updated":"2017-07-07T11:18:04.028Z","comments":true,"path":"2017/07/09/python-自学笔记/","link":"","permalink":"http://yoursite.com/2017/07/09/python-自学笔记/","excerpt":"日期: 2017-07-07 17:17:42tags:对于单个字符的编码，Python 提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：","text":"日期: 2017-07-07 17:17:42tags:对于单个字符的编码，Python 提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符： &gt;&gt;&gt; ord(&apos;A&apos;) 65 &gt;&gt;&gt; ord(&apos;中&apos;) 20013 &gt;&gt;&gt; chr(66) &apos;B&apos; &gt;&gt;&gt; chr(25991) &apos;文&apos; 以 Unicode 表示的 str 通过 encode() 方法可以编码为指定的 bytes ，例如： &gt;&gt;&gt; &apos;ABC&apos;.encode(&apos;ascii&apos;) b&apos;ABC&apos; &gt;&gt;&gt; &apos;中文&apos;.encode(&apos;utf-8&apos;) b&apos;\\xe4\\xb8\\xad\\xe6\\x96\\x87&apos; &gt;&gt;&gt; b&apos;ABC&apos;.decode(&apos;ascii&apos;) &apos;ABC&apos; &gt;&gt;&gt; b&apos;\\xe4\\xb8\\xad\\xe6\\x96\\x87&apos;.decode(&apos;utf-8&apos;) &apos;中文&apos; 计算字符串长度： &gt;&gt;&gt; len(&apos;ABC&apos;) 3 保留小数: &gt;&gt;&gt; &apos;%2d-%02d&apos; % (3, 1) &apos; 3-01&apos; &gt;&gt;&gt; &apos;%.2f&apos; % 3.1415926 &apos;3.14&apos; 有些时候，字符串里面的 % 是一个普通字符怎么办？这个时候就需要转义，用 %% 来表示一个 % ： &gt;&gt;&gt; &apos;growth rate: %d %%&apos; % 7 &apos;growth rate: 7 %&apos; list列表用法： &gt;&gt;&gt; classmates = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;] &gt;&gt;&gt; classmates [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;] &gt;&gt;&gt; classmates[0] &apos;Michael&apos; 获取最后一个元素： &gt;&gt;&gt; classmates[-1] &apos;Tracy&apos; 往 list 中追加元素到末尾： &gt;&gt;&gt; classmates.append(&apos;Adam&apos;) 把元素插入到指定的位置，比如索引号为 1 的位置： &gt;&gt;&gt; classmates.insert(1, &apos;Jack&apos;) 要删除指定位置的元素，用 pop(i) 方法，其中 i 是索引位置： &gt;&gt;&gt; classmates.pop(1) 要把某个元素替换成别的元素，可以直接赋值给对应的索引位置： &gt;&gt;&gt; classmates[1] = &apos;Sarah&apos; Python 的循环有两种，一种是 for...in 循环，依次把 list 或 tuple 中的每个元素迭代出来，看例子： names = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;] for name in names: print(name) 执行这段代码，会依次打印 names 的每一个元素： Michael, Bob, Tracy sum = 0 for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: sum = sum + x print(sum) sum = 0 for x in range(101): sum = sum + x print(sum) 第二种循环是 while 循环，只要条件满足，就不断循环，条件不满足时退出循环。 sum = 0 n = 99 while n &gt; 0: sum = sum + n n = n - 2 print(sum) 重复元素在 set 中自动被过滤： &gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3]) &gt;&gt;&gt; s {1, 2, 3} &gt;&gt;&gt; s.add(4) &gt;&gt;&gt; s {1, 2, 3, 4} 通过 remove(key) 方法可以删除元素： &gt;&gt;&gt; s.remove(4) &gt;&gt;&gt; s {1, 2, 3} set 可以看成数学意义上的无序和无重复元素的集合，因此，两个 set 可以做数学意义上的交集、并集等操作： &gt;&gt;&gt; s1 = set([1, 2, 3]) &gt;&gt;&gt; s2 = set([2, 3, 4]) &gt;&gt;&gt; s1 &amp; s2 {2, 3} &gt;&gt;&gt; s1 | s2 {1, 2, 3, 4} 而对于不可变对象，比如 str，对 str 进行操作呢： &gt;&gt;&gt; a = &apos;abc&apos; &gt;&gt;&gt; a.replace(&apos;a&apos;, &apos;A&apos;) &apos;Abc&apos; &gt;&gt;&gt; a &apos;abc&apos; &gt;&gt;&gt; max(2, 3, 1, -5) 3 &gt;&gt;&gt; int(&apos;123&apos;) 123 &gt;&gt;&gt; int(12.34) 12 math包里含有数学运算有：三角函数：cos,sin。。开平方sqrt() &gt;&gt;&gt; import math &gt;&gt;&gt; math.sqrt(2) 1.4142135623730951 def power(x, n): s = 1 while n &gt; 0: n = n - 1 s = s * x return s 对于这个修改后的 power(x, n) 函数，可以计算任意 n 次方： &gt;&gt;&gt; power(5, 2) 25 &gt;&gt;&gt; power(5, 3) 125 def enroll(name, gender, age=6, city=&apos;Beijing&apos;): print(&apos;name:&apos;, name) print(&apos;gender:&apos;, gender) print(&apos;age:&apos;, age) print(&apos;city:&apos;, city) 这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参 数： &gt;&gt;&gt; enroll(&apos;Sarah&apos;, &apos;F&apos;) name: Sarah gender: F age: 6 city: Beijing def calc(numbers): sum = 0 for n in numbers: sum = sum + n * n return sum &gt;&gt;&gt; calc((1, 3, 5, 7)) 定义可变参数和定义一个 list 或 tuple 参数相比，仅仅在参数前面加了一个 * 号。 def calc(*numbers): sum = 0 for n in numbers: sum = sum + n * n return sum &gt;&gt;&gt; calc(1, 2) 5 &gt;&gt;&gt; nums = [1, 2, 3] &gt;&gt;&gt; calc(*nums) 14 def person(name, age, **kw): print(&apos;name:&apos;, name, &apos;age:&apos;, age, &apos;other:&apos;, kw) &gt;&gt;&gt; person(&apos;Michael&apos;, 30) name: Michael age: 30 other: {} &gt;&gt;&gt; person(&apos;Bob&apos;, 35, city=&apos;Beijing&apos;) name: Bob age: 35 other: {&apos;city&apos;: &apos;Beijing&apos;} 递归函数： def fact(n): if n==1: return 1 return n * fact(n - 1) &gt;&gt;&gt; fact(5) 120 函数的切片： &gt;&gt;&gt; L[0:3] [&apos;Michael&apos;, &apos;Sarah&apos;, &apos;Tracy&apos;] L[0:3] 表示，从索引 0 开始取，直到索引 3 为止，但不包括索引 3 。 &gt;&gt;&gt; (0, 1, 2, 3, 4, 5)[:3] (0, 1, 2) &gt;&gt;&gt; &apos;ABCDEFG&apos;[:3] &apos;ABC&apos; 前 10 个数，每两个取一个： &gt;&gt;&gt; L[:10:2] [0, 2, 4, 6, 8]","categories":[],"tags":[]},{"title":"python中lambda表达式学习","slug":"python中lambda表达式学习","date":"2017-07-09T09:03:52.033Z","updated":"2017-07-07T11:20:16.697Z","comments":true,"path":"2017/07/09/python中lambda表达式学习/","link":"","permalink":"http://yoursite.com/2017/07/09/python中lambda表达式学习/","excerpt":"date: 2017-07-07 18:09:14 tags:lambda只是一个表达式，函数体比def简单很多。","text":"date: 2017-07-07 18:09:14 tags:lambda只是一个表达式，函数体比def简单很多。lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。 lambda表达式是起到一个函数速写的作用。允许在代码内嵌入一个函数的定义。 如下例子：定义了一个lambda表达式，求三个数的和。 再看一个例子：用lambda表达式求n的阶乘。 lambda表达式也可以用在def函数中。如下例子： 这里定义了一个action函数，返回了一个lambda表达式。其中lambda表达式获取到了上层def作用域的变量名x的值。a是action函数的返回值，a(22)，即是调用了action返回的lambda表达式。这里也可以把def直接写成lambda形式。如下 看教程看到这一题答案发现原来有更简单的写法，用了lambda,当时不知道用法，然后百度后才明白 from functools import reduce def prod(L): return reduce(lambda x,y: x*y,L) print(&apos;3 * 5 * 7 * 9 =&apos;, prod([3, 5, 7, 9]))","categories":[],"tags":[]},{"title":"python的典型实例","slug":"python的典型实例","date":"2017-07-09T09:03:52.023Z","updated":"2017-07-09T08:54:38.237Z","comments":true,"path":"2017/07/09/python的典型实例/","link":"","permalink":"http://yoursite.com/2017/07/09/python的典型实例/","excerpt":"date: 2017-07-07 18:21:52 tags:nonlocal关键字用来在函数或其他作用域中使用外层(非全局)变量。","text":"date: 2017-07-07 18:21:52 tags:nonlocal关键字用来在函数或其他作用域中使用外层(非全局)变量。 不知道字符串转大写是upper()，转小写是lower() 忘记字符串也可以切片了 字符串的连接原来可以用加号+ 123456def normalize(name): return name[0].upper()+name[1:].lower()L1 = ['adam', 'LISA', 'barT']L2 = list(map(normalize, L1))print(L2) name[0].upper() 是首字母大写name[1:].lower() 从第二个字母开始全都小写 字符串转数的算法已经在示例中已经有了，也很好理解。转成浮点数的难点在于小数点两遍的数字处理方法不一样。我想肯定需要一个判断句，判断在小数点的左右，而采用不同的方法。同时，还要一个参数来记住小数点的位置。最终，又是参考各位大神，又是参照作者的答案。大概是懂了。 作者的答案:1234567891011121314151617181920212223242526272829303132from functools import reduceCHAR_TO_FLOAT = &#123; '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '.': -1 &#125;def str2float(s): nums = map(lambda ch: CHAR_TO_FLOAT[ch], s) point = 0def to_float(f, n): nonlocal point if n == -1: point = 1 return f if point == 0: return f * 10 + n else: point = point * 10 return f + n / point return reduce(to_float, nums, 0.0) print(str2float('0')) print(str2float('123.456')) print(str2float('123.45600')) print(str2float('0.1234')) 由于to_float传入的数据都是数而不是字符，因此CHAR_TO_FLOAT里面定义.为0-9以外的数，加以区分。if n == -1:用来判断是否已经到小数点的位置，如果到了则改变point的值，point可以说是记录了当前小数点的位置，默认为0。然后根据point值来判断小数点的位置，以确定使用哪个转换算法。return reduce(to_float,nums,0.0)中有一项是0.0，是为了转换整数字符为浮点数。如果不添加0.0，则CHAR_TO_FLOAT里的value都要改成浮点数的形式，key值不用改，小数点对应的数值也可以不改。 筛选出字符串类型并展示：123456789101112L1=['hello','world',18,'apple',None]L2=[]n=1for s in L1: if isinstance(s,str)==1: L2.append(s.lower()) else: print('the number of non str is %d ' %(n)) n=n+1 print(L2)L2=[s.lower() for s in L1 if isinstance(s,str)==1]print(L2) 斐波拉契数列12345678 def fib(max): n, a, b = 0, 0, 1 while n &lt; max: print(b) a, b = b, a + b n = n + 1 return 'done'上面的函数可以输出斐波那契数列的前 N 个数：&gt;&gt;&gt; fib(6) 杨辉三角12345678910111213141516171819202122def triangles(): j = 0 L1 = [] L2 = [] S1 = 0 while j &lt; 10: s = 0 for i in L1: S1 = s + i s = i #記錄上個循環i的值 L2.append(S1) L2.append(1) yield L2 #生成器 返回L2 list 列表的值 L1 = L2[:] #將L1指向L2 變成上一次循環的list L2 = [] #L2保存的是當次循環的list 初始化她 j = j + 1n = 0for x in triangles(): print(x) n = n + 1 if n == 10: break","categories":[],"tags":[]}]}